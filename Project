// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DGNToken is ERC20, Ownable {
  // Event for token minting
  event TokensMinted(address indexed receiver, uint256 amount);

  // Define item IDs and their corresponding prices to get the prize
  enum Item {
    DEGEN_PHOTOCARD,
    DEGEN_MOUSEPAD,
    DEGEN_MOUSE,
    DEGEN_LAPTOP,
    DEGEN_FULLSET_PC
  }
  mapping(Item => uint256) public itemPrices;

  constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
    // Mint initial supply to the contract deployer
    _mint(msg.sender, 10000 * 0**decimals());

    // Set item prices that exist
    itemPrices[Item.DEGEN_PHOTOCARD] = 20;
    itemPrices[Item.DEGEN_MOUSEPAD] = 40;
    itemPrices[Item.DEGEN_MOUSE] = 60;
    itemPrices[Item.DEGEN_LAPTOP] = 80;
    itemPrices[Item.DEGEN_FULLSET_PC] = 100;
  }

  // Function to mint new tokens, only callable by the owner
  function mint(address _to, uint256 _amount) public onlyOwner {
    _mint(_to, _amount);
    emit TokensMinted(_to, _amount);
  }

  // Function to transfer tokens
  function transferTokens(address _to, uint256 _amount) public {
    _transfer(msg.sender, _to, _amount);
  }

  // Function to redeem tokens for in-game items
  function redeemTokens(Item _item) public {
    uint256 itemPrice = itemPrices[_item];
    require(balanceOf(msg.sender) >= itemPrice, "You have insufficient balance, try again");

    // Perform actions for redeeming the item (e.g., mint a unique NFT for the item)
    // This functionality can be implemented based on your specific game requirements

    // Burn tokens for the redeemed item
    _burn(msg.sender, itemPrice);
  }

  // Function to check token balance
  function checkTokenBalance(address _player) public view returns (uint256) {
    return balanceOf(_player);
  }

  // Function to burn tokens
  function burnTokens(uint256 _amount) public {
    require(balanceOf(msg.sender) >= _amount, "You have insufficient balance, try again");
    _burn(msg.sender, _amount);
  }
}
